package com.etc5.snake;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

/**
 * @author tangzhen
 * @version 1.0
 * @date 2023/12/12 14:08
 */
public class GamePanel extends JPanel implements KeyListener, ActionListener {
    //蛇的属性🐍
    int length;
    int[] snakeX = new int[600];
    int[] snakeY = new int[600];
    String fx;//初始化时蛇头方向
    //食物
    int foodX;
    int foodY;
    Random random = new Random();
    //当前游戏状态
    boolean isStart = false;//是否正在运行
    boolean isDead = false;//是否失败
    int score;//成绩
    //事件间隔器
    Timer timer = new Timer(100,this);//设定当前面板 执行间隔为100ms一次
    public GamePanel(){
        init();
        //加载监听事件

        this.setFocusable(true);
        this.addKeyListener(this);

        //启动游戏
        timer.start();
    }
    //游戏初始化函数
    public void init(){
        //初始化蛇
        length=5;//初始长度为5
        snakeX[0] = 150; snakeY[0] = 150;
        snakeX[1] = 125; snakeY[1] = 150;
        snakeX[2] = 100; snakeY[2] = 150;
        snakeX[3] = 75; snakeY[3] = 150;
        snakeX[4] = 50; snakeY[4] = 150;
        fx="R";
        //初始化食物点
        foodX = 25*(random.nextInt(750/25));
        foodY = 25*(random.nextInt(600/25));
    }
    //绘图

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);//清屏
        //绘制静态面板
        setBackground(new Color(70,70,70));

//        GameData.leftImg.paintIcon(this,g,25,11);

        //画成绩
        g.setColor(Color.BLACK);
        g.setFont(new Font("楷体",Font.BOLD,30));
        g.drawString("长度:"+length,500,50);
        g.drawString("分数:"+score,700,50);

        //游戏主体界面
        g.setColor(Color.GRAY);
        g.fillRect(25,75,850,600); //绘制填充矩形

        //绘制蛇🐍
        if("R".equals(fx)){
            GameData.rightImg.paintIcon(this,g,snakeX[0],snakeY[0]);
        }else if("L".equals(fx)){
            GameData.leftImg.paintIcon(this,g,snakeX[0],snakeY[0]);
        }else if("U".equals(fx)){
            GameData.upImg.paintIcon(this,g,snakeX[0],snakeY[0]);
        }else{
            GameData.downImg.paintIcon(this,g,snakeX[0],snakeY[0]);
        }
        for(int i=1;i<length;i++){
            GameData.bodyImg.paintIcon(this,g,snakeX[i],snakeY[i]);
        }

        //画食物
        GameData.foodImg.paintIcon(this,g,foodX,foodY);

        //游戏状态不同，游戏核心页面显示文字不同
        if(isStart){
            g.setColor(Color.WHITE);
            g.setFont(new Font("楷体",Font.BOLD,30));
            g.drawString("按下空格开始游戏",300,300);
        }
        if(isDead){
            g.setColor(Color.red);
            g.setFont(new Font("楷体",Font.BOLD,30));
            g.drawString("游戏失败,按下空格开始游戏",300,300);
        }
    }


    //键盘事件监听

    //自定义事件监听

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        if(keyCode == KeyEvent.VK_SPACE){
            if(isDead){
                isDead = false;
                init();
            }else {
                isStart = !isStart;
            }
            repaint();
        }
        //蛇的方向
        if(keyCode == KeyEvent.VK_UP){
            fx="U";
        }else if(keyCode == KeyEvent.VK_DOWN){
            fx="D";
        } else if (keyCode == KeyEvent.VK_LEFT) {
            fx="L";
        } else if (keyCode == KeyEvent.VK_RIGHT) {
            fx="R";
        }

    }

    @Override
    public void keyReleased(KeyEvent e) {

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(isStart && !isDead){
            //吃食物
            if(snakeX[0] == foodX && snakeY[0] == foodY){
                length++;
                score+=100;
                //重置食物
                foodX = 25*(random.nextInt(850/25)+1);
                foodY = 25*(random.nextInt(850/25)+1);
            }
            //蛇的移动
            //身体移动
            for(int i=length-1;i>0;i--){
                snakeX[i]=snakeX[i-1];
                snakeY[i]=snakeY[i-1];
            }
            //头部移动
            if("R".equals(fx)){
                snakeX[0] += 25;
                if(snakeX[0]>850){
                    snakeX[0] = 25;
                }
            }else if("L".equals(fx)){
                snakeX[0] -= 25;
                if(snakeX[0]<25){
                    snakeX[0] = 850;
                }
            }else if("U".equals(fx)){
                snakeY[0] -= 25;
                if(snakeY[0]<75){
                    snakeY[0] = 650;
                }
            }else{
                snakeY[0] += 25;
                if(snakeY[0]>650){
                    snakeY[0] = 75;
                }
            }

            //失败的判断，撞到自己
            for(int i=1;i<length;i++){
                if(snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]){
                    isDead = true;
                }
            }

            //使用时间间隔器，让以上代码每100ms执行一次
            repaint();
        }
        timer.start();
    }
}